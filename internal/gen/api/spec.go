// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWQW/jOA/9K4K+7+g2mc6cfCu62EUPAyw2C+yh6IGxmVhTW/JQVLpB4f++oGTHTuI0",
	"7WFucSiRj4+PpN504ZrWWbTsdf6mfVFhA/HnAxKbjSmAUT5L9AWZlo2zOtd/V8Yr4xUob+y2RlWMp9XG",
	"kSqc9aExdqucVUVtYoBMt+RaOYkxBASuHBnezwU49nk4Gr3zsVVnmvct6lx7JmO3ust0QXzd6wd9la4B",
	"Y+fdJVv09FqZojr1pyJRPmA55/kFL+TektnJ7Rf8YMZdpgl/BkNY6vxpgJxNOE7REjPPh/tu/QMLFiyP",
	"duMEzHGN1uBNcR+4Osf5T4VcIal4JFZIkkUL63qa7dq5GsFKiB2Sj3fnUu6Nym0O2d40YGGLdOOx3nik",
	"nSmupz4EySbY5/JdMXDw5xlPaI7f/yfc6Fz/bzG2yqLvk0Xy8TC90WW6Qe9hm27P9A0QKtyhZTUcVC25",
	"MhRYqvX+WvKGsfkgru/JvUDqswci2J8xdsCbHSd/mbWHE44uTQe3E9z4KkWFup5K2CufCnA6FTZgRD/5",
	"2xDcWMYtkkRv0ZZS81kjIZT7eRM7hnreFOyLda92znhCU3IyghgiZgPk0dll5oaanMmuGQ1nY8LjDoc5",
	"iTY0gsZIu2b6FcgmMEjkaBJ5vM6miX43jhpgnesSGG/iv9eaqT80gJtAOU8xAi2CWFeiw5kBEvUZh4L8",
	"O0avmFvdiQfTTyE2XItFlKa+p05Qq7ET1P2fj3oyUfSX2+XtUrJ1LVpojc7119vl7VcpGHAVsSwm+lu8",
	"pRnZiWGLcVtIPUBE/FjqXP+BPNH5b8NEbYGgQUbyOn96ZyWwU1vks32wcSRdLIcFl860hUjJYWSP/DMF",
	"zPqlPCOMLjsN/3us8DBCCX2oOVMlbiDU7AXSDx9HY4z/MyDtRwC9PKYB+5s61/29QX39p+ySw16B2BvN",
	"jAS7Z8nKt876JIq75TKOWmcZbaQe2rYWgoyzi+j88Bq5NuumDxVRUMVNvWD8V9zK9zFD95EBlTSrCFtC",
	"L6P4dMF2mb5b3p2AfN/1CmmHpJgMRqohlvFMAHsXlK9cqEvFtFewFbHUwGkcfVt++1TQ4UmjCrDWsVqL",
	"woItlWEFtXeT/wtCYCyPGjVKeNKiT89SKx+aBmivc/0XciCrwJZpZQWo633vafYptTU7tH0LxEiLoaMv",
	"9dhjGmS/TB/Rf/c5JZh055wJH03SJ/JUgbUL/P7CjhT4w1PjEgmrYRf+Mhr6CJ8kwg+35qhIxqsPti4J",
	"TpojjcxAtc71Alqz2H3R3XP3XwAAAP//CViRJIcMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
