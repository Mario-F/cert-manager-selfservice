// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWwW7jNhD9FYLtUYm92T3pFqRokcMCRdNbkMNEGlvcSKR2OHQqBPr3YkjJkm05Tg57",
	"szzkm8c3b4Z804VrWmfRstf5m/ZFhQ3En3dIbDamAEb5LNEXZFo2zupc/1sZr4xXoLyx2xpVMa1WG0eq",
	"cNaHxtitclYVtYkJMt2Sa2UlxhQQuHJkuFtKcIi5XxrR+TCqM81dizrXnsnYre4zXRBfRv0gVukaMHYZ",
	"LsUi0mtliuoYT0WhfMByCfkFz5y9JbOT3S/4wRP3mSb8GQxhqfPHkXI20zhlS8o87fe75x9YsHC5txsn",
	"ZA5rtEPykdYSyyGo3GZP8KoBC1ukK4/1xiPtTHGZ7ZhkidYDAwd/SmymRvz+nXCjc/3banL0arDzKmHc",
	"zXf0mW7Qe9im3Qv2BkKFO7SsxoWqJVeGAkv13F06sGFsPsjre4IXSsPpgQi6E5X2fLPDw59X7e5Io3NN",
	"7HbCG1+lkFDXc6d55VMBjpt3A6YWXm9jcmMZt0iSvUVbSp0Xg4RQdsshdgz1cijYF+te7VLwSKYEMpEY",
	"M2Yj5QnsvHJjTU5s10yBk272uMNxnKENjbAx0lWZfgWyiQwSOZplnrazaSLuxlEDrHNdAuNV/PdSAw2L",
	"RnIzKqdHjESLINEH8WE61zN4U9wGrvbXgOyJ/07ZK+ZW94JghmHBhmuJiNPU99QJ6mHqBHX7973Opimi",
	"v1yvr9dyWteihdboXH+9Xl9/lYIBV5HLaua/1VsaZb0EthiHutQDxMT3pc71X8gzn/8xDr4WCBpkJK/z",
	"x3cmNzu1RT4Z2xtH0sWyWHjpTFuIkuwn66Q/U8BsuDsXjNFnx+n/jBUexyahDzVnqsQNhJq9UPrhnR3z",
	"/wxI3URgsMc84bBT53rYN7pv+JSRvx//EHujWbBg/ySn8q2zPpniZr2Oo9ZZRhulh7atRSDj7CqC7x8N",
	"l2bd/D0hDqq4qVeM/wmsfB8qdBsVUMmzirAl9DKKj+/BPtM365sjku9DPyDtkBSTwSg1xDKeGKBzQfnK",
	"hbpUTJ2CrZilBk7j6Nv626eSji8PVYC1jtWzOCzYUhlWUHs3+78gBMbyoFGjhWct+vgktfKhaYA6net/",
	"kANZBbZMV1aAuu4GpMUXz9bs0A4tEDOtxo4+12P3aZD9Mn9E/P5zTjBpz6kSPoakT+R5As8u8PsXdpTA",
	"758a50R4GO/CXybDkOGTQvhx15IUKXjxkdYnw0lzpJEZqNa5XkFrVrsvun/q/w8AAP///5PjPi4MAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

