// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWwW7kNgz9FYHt0YlnszffFilQ5LBA0fS2yEGxaY82tuRStFMjmH8vKNljz9iTyR5y",
	"i0Pp8fHxkZo3yF3TOouWPWRv4PM9Njr8eY/EpjS5ZpTPAn1OpmXjLGTwz954ZbzSyhtb1ajy+bQqHanc",
	"Wd81xlbKWZXXJiRIoCXXykkMKXTHe0eGh60Ep5jHowGdT6OQAA8tQgaeydgKDgnkxNdRP4hVuEYbuw0X",
	"YwHpdW/y/TmeCkL5Dost5Be8UHtLppfbL/jBig8JEP7bGcICsh8T5WShccwWlXk63nfPPzFn4fJgSydk",
	"TnvUI/lAa4vlGFSuPBK8abTVFdKNx7r0SL3Jr7OdkmzRemTNnV8TW6gRvn8nLCGD39LZ0elo5zRi3C9v",
	"HBJo0Htdxdsb9taECnu0rKaDqiVXdDkW6nm4VrBhbD7I63uEF0pj9ZpIDyuVjnyT0+Ivq3Z/ptGlIXa9",
	"8MZXaaSu66XTvPKxAefDW2pTC6+3KbmxjBWSZG/RFtLnzSChLobtEDvW9Xaosy/Wvdqt4JlMEWQmMWVM",
	"Jsoz2GXlpp6sbNfMgdU0e+xxWmdou0bYGJmqBF412UgGiRwtMs/X2TQBt3TUaIYMCs14E/57bYDGQxO5",
	"BZV1iXLXjLPOhmuJiVHU92hk9TgbWX376wGSeQnAl9vd7U7Iuhatbg1k8PV2d/tV9Na8DxKlC/ukb3ET",
	"HSRQYdjJIqcWDz4UkMGfyAub/jHtrVaTbpCRPGQ/3lm87FSFvNq6pSMZQjksvCABq0XdeTHO8jF1mIxP",
	"30ZfD09y2LfO+miBu90uLCBnGW2oSLdtLXmNs+lPH7fljPfeBli+sqEzp4V+UwKnYusUYUvoZSOdPweH",
	"BO52d2es9tzUKeN/8rGGfkTqkRSTQS8q6iDHSsjBdcrvXVcXimlQuhLRa83j4PmuaTQNkMHfyB1ZpW0R",
	"t2an63pQOaGgbD26lenRjm0MWOnkyks+eYiz9GnNCPi/2AUT76yV8CEkkywvpH52Hb//ZgQJ/PG1uyTC",
	"47SOP02GMcMvCuGnW1tSxODV3wkhpQ/GjGPfUQ0ZpLo1af8FDk+H/wMAAP//IEbXrLEKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

