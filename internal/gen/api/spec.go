// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/3xTsW7cMAz9FYHt6JydZim0BR2KDAWKpluQgbHps1JbUinaweFw/15QPtfXq9tJlEg+",
	"kk98R6jDEIMnLwnsEVLd0YDZfBSUMVuRQyQWR/lWq9m6GmW+N5RqdlFc8GDhe+eSccmgCRPx5OjNhNZg",
	"35vLPJNm8OIKu0XXU6OWHCKBBeeF9sRwKiCSb5zfbzuZsDlsuyQI9tuu0f/w4c1vOTPmz9GxtvN0Blmb",
	"WCoWS8sr2HOxgIWXV6pFCw2UEu7/yRcyGZrIi1kCTeTQjDU15uVgpKPM3s2AHvfEN4n6Nim7NUEBTmjY",
	"+Kcz1MVwSVh7PxWQaCJ2khkjPw46ovNtgALekP08ITEHvhhnTRc3ZNw28IACFhoUusmvf0VfEzkHLc1d",
	"tLLF2/kBmfGQoa4i9Cn3rUM66dX3iVjMl5kp87gyZe6/PkABE3Gaqb/dVbtKq4RIHqMDC3e7anen34zS",
	"ZRLL9FsFexI9lGLUz3towMJnksdllZlSDD7N7H+oqiyW4IV8TsQYe91+F3z5moJf5abWe6YWLLwrVz2W",
	"ZzGW5wp52j+3594okpnpMEyRKeka6cakJauANA4D8gEsfCMZ2S/6U2n+d7lySb0QJ7BPRxi5BwudSLRl",
	"2Yca+y4ksR+ru6rE6MrpFk7Pp18BAAD//18Pa3pWBAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

