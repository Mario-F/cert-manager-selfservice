/* tslint:disable */
/* eslint-disable */
/**
 * Cert Manager Selfservice API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import globalAxios, * as axios_1 from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import * as base from './base';

/**
 *
 * @export
 * @interface Info
 */
export interface Info {
    /**
     * The version of the cert-manager-selfservice
     * @type {string}
     * @memberof Info
     */
    'version': string;
}
/**
 *
 * @export
 * @interface Status
 */
export interface Status {
    /**
     * This are event messages produced by the cert-manager-selfservice
     * @type {Array<StatusMessage>}
     * @memberof Status
     */
    'messages': Array<StatusMessage>;
    /**
     *
     * @type {StatusCertificates}
     * @memberof Status
     */
    'certificates': StatusCertificates;
}
/**
 * This is a overview of all certificates status
 * @export
 * @interface StatusCertificates
 */
export interface StatusCertificates {
    /**
     *
     * @type {number}
     * @memberof StatusCertificates
     */
    'total': number;
    /**
     *
     * @type {number}
     * @memberof StatusCertificates
     */
    'pending': number;
    /**
     *
     * @type {number}
     * @memberof StatusCertificates
     */
    'ready': number;
    /**
     *
     * @type {number}
     * @memberof StatusCertificates
     */
    'failed': number;
    /**
     *
     * @type {number}
     * @memberof StatusCertificates
     */
    'unknown': number;
}
/**
 *
 * @export
 * @interface StatusMessage
 */
export interface StatusMessage {
    /**
     *
     * @type {string}
     * @memberof StatusMessage
     */
    'time': string;
    /**
     *
     * @type {string}
     * @memberof StatusMessage
     */
    'severity': StatusMessageSeverityEnum;
    /**
     *
     * @type {string}
     * @memberof StatusMessage
     */
    'message': string;
}

export const StatusMessageSeverityEnum = {
    Info: 'info',
    Warning: 'warning',
    Error: 'error'
} as const;

export type StatusMessageSeverityEnum = typeof StatusMessageSeverityEnum[keyof typeof StatusMessageSeverityEnum];


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Returns information about the cert-manager-selfservice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoGet: async (options: axios_1.AxiosRequestConfig = {}): Promise<base.RequestArgs> => {
            const localVarPath = `/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns status of the cert-manager-selfservice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusGet: async (options: axios_1.AxiosRequestConfig = {}): Promise<base.RequestArgs> => {
            const localVarPath = `/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Returns information about the cert-manager-selfservice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async infoGet(options?: axios_1.AxiosRequestConfig): Promise<(axios?: axios_1.AxiosInstance, basePath?: string) => axios_1.AxiosPromise<Info>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.infoGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, base.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Returns status of the cert-manager-selfservice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statusGet(options?: axios_1.AxiosRequestConfig): Promise<(axios?: axios_1.AxiosInstance, basePath?: string) => axios_1.AxiosPromise<Status>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statusGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, base.BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: axios_1.AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         *
         * @summary Returns information about the cert-manager-selfservice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        infoGet(options?: any): axios_1.AxiosPromise<Info> {
            return localVarFp.infoGet(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns status of the cert-manager-selfservice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusGet(options?: any): axios_1.AxiosPromise<Status> {
            return localVarFp.statusGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends base.BaseAPI {
    /**
     *
     * @summary Returns information about the cert-manager-selfservice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public infoGet(options?: axios_1.AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).infoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Returns status of the cert-manager-selfservice
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public statusGet(options?: axios_1.AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).statusGet(options).then((request) => request(this.axios, this.basePath));
    }
}


